[[http://www.gnu.org/licenses/gpl-3.0.txt][file:https://img.shields.io/badge/license-GPL_3-green.svg]]
[[https://github.com/lanceberge/gptel-copilot/actions][file:https://github.com/lanceberge/gptel-copilot/actions/workflows/ci.yml/badge.svg]]

* gptel-copilot

  This package lets you automatically apply AI-generated changes as you code. Call M-x =gptel-copilot-query=
  and request a set of changes, and they will be applied to your code buffer as a merge.

* Installation

#+BEGIN_SRC emacs-lisp :results none
(use-package gptel-copilot
  :straight
  ;; TODO bind-key
  (:host github :repo "lanceberge/gptel-copilot" :branch "main" :files ("*.el")))

(use-package gptel
  :custom
  (gptel-model "claude-3-5-sonnet-20240620")
  :config
  (defun read-file-contents (file-path)
    "Read the contents of FILE-PATH and return it as a string."
    (with-temp-buffer
      (insert-file-contents file-path)
      (buffer-string)))
  (defun gptel-api-key ()
    (read-file-contents "~/secrets/claude_key"))
  (setq
   gptel-backend (gptel-make-anthropic "Claude"
		   :stream t
		   :key #'gptel-api-key)))
#+END_SRC

Use =smerge-mode= to then merge in the changes

#+BEGIN_SRC emacs-lisp :results none
(use-package smerge-mode
  :ensure nil
  :hook (prog-mode . smerge-mode))
#+END_SRC

Important functions:

| =smerge-next=       | go to the next conflicting hunk        |
| =smerge-keep-other= | keep the changes from =gptel-copilot=    |
| =smerge-keep-mine=  | discard the changes from =gptel-copilot= |

* Notes

  =gptel-copilot= uses [[https://github.com/karthink/gptel][gptel]] as a backend. It supports any of the models supported by =gptel=, but currently
  Claude 3-5 Sonnet seems to be the best for generating code.

* Planned Features

- Function to implement pseudocode
- Implementing [[https://docs.anthropic.com/en/docs/build-with-claude/prompt-caching][Prompt Caching]] with Anthropic to let us send more queries before getting rate-limited
